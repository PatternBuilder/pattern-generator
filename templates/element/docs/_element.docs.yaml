<%# Get primitive function returns the appropriate value for the dataset and type %><%

const getPrimitive = ( type, format, dropdownList ) => {
    let ret;
    if ( type === "boolean" ) {
        ret = false;
    } else if ( type === "number" ) {
        ret = 0;
    } else {
        let string = "Lorem ipsum";
        if ( format === "html" ) {
            string = "\"<p>" + string + "</p>\"";
        }
        if ( dropdownList.length > 0 ) {
            string = dropdownList[ 0 ];
        }
        ret = string;
    }
    return ret;
}; %>name: <%= props.name.toUnderscore() %><%

// Template + misc_data available in component and layout only
if ( props.template_type === "component" || props.template_type === "layout" ) { %>
misc_data:<%
}

// Metadata available in layout and pattern only
if ( props.template_type === "layout" || props.template_type.startsWith( "pattern" ) ) { %>
meta:
    class:
        - foo
    id: bar<%
}

// Specific properties only for the page type
if ( props.template_type === "page" ) { %>
config:
    body_class: example
header:<%
    if ( typeof props.header_refs !== 'undefined' ) { %>
    - @<%= props.header_refs[ 0 ].toUnderscore() %><%
    } %>
body:<%
    if ( typeof props.body_refs !== 'undefined' ) { %>
    - @<%= props.body_refs[ 0 ].toUnderscore() %><%
    }
}

if ( props.template_elements.includes( 'navigation' ) ) { %>
navigation: "<div style='margin: 0 auto; background-image: url(/fixtures/images/utility.png); height: 39px; max-width: 1170px;'></div><div style='max-width: 1170px; margin: 0 auto; background-image: url(/fixtures/images/nav.png); height: 88px; margin-bottom: 25px'></div>"<%
}

if ( props.template_elements.includes( 'align' ) ) { %>
align: left<%
}

if ( props.template_elements.includes( 'size' ) ) { %>
size: medium<%
}

if ( props.template_elements.includes( 'seo' ) ) { %>
seo:
    position: secondary
    priority: standard<%
}

if ( props.template_elements.includes( 'title' ) ) { %>
title: Lorem ipsum<%
}

if ( props.template_elements.includes( 'headline' ) ) { %>
headline: Vestibulum ac diam sit amet quam<%
}

if ( props.template_elements.includes( 'summary' ) ) { %>
summary: "<p>Nulla quis lorem ut libero malesuada feugiat. <a>Quisque velit nisi, pretium ut lacinia in</a>, elementum id enim. Mauris blandit aliquet elit&reg;, eget tincidunt nibh pulvinar a. Nulla quis lorem ut libero malesuada feugiat.</p>"<%
}

if ( props.template_elements.includes( 'link' ) ) { %>
link:
    href: "#"
    title: Lorem ipsum
    text: Lorem ipsum<%
}

if ( props.template_elements.includes( 'image' ) ) { %>
image:
    src: "#"
    alt: Lorem ipsum<%
}

if ( props.template_elements.includes( 'video' ) ) { %>
video:
    video_src: "#"<%
}

if ( props.template_elements.includes( 'config' ) ) { %>
config:<%
    if ( props.config_options.includes( 'collapse' ) ) { %>
    collapse: both<%
    }
    if ( props.config_options.includes( 'vertical_spacing' ) ) { %>
    vertical_spacing: stacked<%
    }
    if ( props.config_options.includes( 'eqpts' ) ) { %>
    eqpts: "small: 400, medium: 600, large: 900"<%
    }
    if ( props.config_options.includes( 'justify' ) ) { %>
    justify: justify<%
    }
    if ( props.config_options.includes( 'align' ) ) { %>
    align: left<%
    }
    if ( props.config_options.includes( 'breakpoints' ) ) { %>
    breakpoints:
        - xxs
        - xs
        - sm<%
    }
}

if ( props.template_elements.includes( 'background' ) ) { %>
background:<%
    if ( props.background_options.includes( 'color' ) ||  props.template_type === 'layout' ) { %>
    color: white<%
    }
    if ( props.background_options.includes( 'overlay' ) ||  props.template_type === 'layout' ) { %>
    overlay: 30%<%
    }
    if ( props.background_options.includes( 'images' ) ||  props.template_type === 'layout' ) { %>
    image_large:
        src: "/fixtures/images/bg2.jpg"
    image_small:
        src: "/fixtures/images/bg1.jpg"<%
    }
    if ( props.background_options.includes( 'isFixed' ) ||  props.template_type === 'layout' ) { %>
    isFixed: false<%
    }
    if ( props.background_options.includes( 'align' ) ||  props.template_type === 'layout' ) { %>
    align: center-center<%
    }
}

if ( props.template_elements.includes( 'container' ) ) { %>
container:
    background: gray
    align: left<%
}

if ( props.template_elements.includes( 'header' ) ) { %>
header:
    layout: stacked
    sub_patterns:<% props.header_refs.forEach( function( ref, idx ) { %>
        - @<%= ref %><% } ); %><%
}

if ( props.template_elements.includes( 'body' ) ) { %>
body:
    layout: gallery2
    sub_patterns:<% props.body_refs.forEach( function( ref, idx ) { %>
        - @<%= ref %><% } ); %><%
}

if ( props.template_elements.includes( 'aside' ) ) { %>
aside:
    layout: stacked
    sub_patterns:<% props.aside_refs.forEach( function( ref, idx ) { %>
        - @<%= ref %><% } ); %><%
}

if ( props.template_elements.includes( 'footer' ) ) { %>
footer:
    layout: stacked
    sub_patterns:<% props.footer_refs.forEach( function( ref, idx ) { %>
        - @<%= ref %><% } ); %><%
}

// CONTENT object (typically subpattern only)
if ( props.template_elements.includes( 'content' ) ) { %>
content:<%

let names_list = props.elements.content_elements;
for ( let [ name, element ] of Object.entries( props.elements ) ) {
    // Check that this property is an element
    if ( names_list.includes( name ) ) { %>
    <%=  element.name.toUnderscore() %>: <%
        if ( [ 'string', 'boolean', 'number' ].includes( element.options.type ) ) { %><%- getPrimitive( element.options.type, element.options.format, element.dropdown_items ); %><% }
        else if ( element.options.type === 'array' ) {
            element.refs.forEach( function( ref, r_idx ) { %>
        - @<%= ref.toUnderscore() %><%
            } );
        }
        else if ( element.options.type === 'object' ) {
            // If this object has CHILDREN elements
            let child_list = element[ element.name + "_elements" ];
            // Iterate over children objects
            for ( let [ child_name, child_element ] of Object.entries( element.children ) ) {
                // Check that this property is an element
                if ( child_list.includes( child_name ) ) { %>
        <%= child_element.name.toUnderscore() %>: <%
            if ( [ 'string', 'boolean', 'number' ].includes( child_element.options.type ) ) { %><%- getPrimitive( child_element.options.type, child_element.options.format, child_element.dropdown_items ); %><% }
            else if ( child_element.options.type === 'array' ) {
                child_element.refs.forEach( function( ref, r_idx ) { %>
            - @<%= ref.toUnderscore() %><%
                } );
            }
            else if ( child_element.options.type === 'object' ) {%>{}<% }
        } }
        } // end object check for parent
    } // end name validation check
} // end for loop
} // end content if statement



// -- CUSTOM ELEMENTS
let names_list = props.elements.custom_elements;
for ( let [ name, element ] of Object.entries( props.elements ) ) {
    // Check that this property is an element
    if ( names_list.includes( name ) ) { %>
<%=  element.name.toUnderscore() %>: <%
        if ( [ 'string', 'boolean', 'number' ].includes( element.options.type ) ) { %><%- getPrimitive( element.options.type, element.options.format, element.dropdown_items ); %><% }
        else if ( element.options.type === 'array' ) {
            element.refs.forEach( function( ref, r_idx ) { %>
    - @<%= ref.toUnderscore() %><%
            } );
        }
        else if ( element.options.type === 'object' ) {
            // If this object has CHILDREN elements
            let child_list = element[ element.name + "_elements" ];
            // Iterate over children objects
            for ( let [ child_name, child_element ] of Object.entries( element.children ) ) {
                // Check that this property is an element
                if ( child_list.includes( child_name ) ) { %>
    <%= child_element.name.toUnderscore() %>: <%
            if ( [ 'string', 'boolean', 'number' ].includes( child_element.options.type ) ) { %><%- getPrimitive( child_element.options.type, child_element.options.format, child_element.dropdown_items ); %><% }
            else if ( child_element.options.type === 'array' ) {
                child_element.refs.forEach( function( ref, r_idx ) { %>
        - @<%= ref.toUnderscore() %><%
                } );
            }
            else if ( child_element.options.type === 'object' ) {%>{}<% }
        } }
        } // end object check for parent
    } // end name validation check
} %>
